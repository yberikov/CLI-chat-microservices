version: '2.1'

services:


  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888


  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      zoo1:
          condition: service_started

  init-kafka-container:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-setup
    depends_on:
      kafka1:
        condition: service_started
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "

      kafka-topics --bootstrap-server kafka1:19092 --list
      
      # create init topics
      kafka-topics --create --partitions 6 --bootstrap-server kafka1:19092 --topic messages
      "
  
  

  storage-microservice:
    build: storage-microservice
    container_name: storage-microservice
    hostname: storage-microservice
    ports:
      - "8081:8081"
    depends_on:
      kafka1:
         condition: service_started
      postgres:
        condition: service_healthy
    environment:
      - CONFIG_PATH=config/config.yaml
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=12345
      - POSTGRES_DB=chat


  postgres:
    restart: always
    shm_size: 128mb
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "user", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=12345
      - POSTGRES_DB=chat

    ports:
      - "5434:5432"
    image: postgres:latest
    hostname: postgres
    container_name: postgres



  redis:
    image: redis:latest
    restart: always
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - /path/to/local/data:/root/redis
      - /path/to/local/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=my-password
      - REDIS_PORT=6379
      - REDIS_DATABASES=16

  chat-microservice:
    build: chat-microservice
    container_name: chat-microservice
    ports:
      - "8080:8080"
    depends_on:
      kafka1:
        condition: service_started
      redis:
        condition: service_started
      storage-microservice:
        condition: service_started
    environment:
      - CONFIG_PATH=config/config.yaml
